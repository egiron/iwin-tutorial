{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to IWIN library","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"#codeblocks","title":"Codeblocks","text":"<p>Some <code>code</code> goes here.</p>"},{"location":"#plain-codeblock","title":"Plain codeblock","text":"<p>A plain codeblock:</p> <pre><code>Some code here\ndef myFunction():\n    // some comments\n    pass\n</code></pre>"},{"location":"#code-for-a-specific-language","title":"Code for a specific language","text":"main.py<pre><code>import iwin\ndef load_dataset():\nprint(\"Loading data\")\nreturn None\n</code></pre>"},{"location":"#icons-and-emojis","title":"Icons and Emojis","text":""},{"location":"about/","title":"Simulac intra odium inmissusque lacrimae versa","text":""},{"location":"about/#cycno-somnus","title":"Cycno Somnus","text":"<p>Lorem markdownum tabularia aut; voles cui linguae rursus. At more nentes prohibet Indigetes virgo templis equo fortuna gerunt Nebrophonosque poscimus, servant inpune, est in! Amantem comitatur adsensu repperit iuxta florem satis vulnere lacrimae nemus in rigescunt ab suus faciemque.</p> <pre><code>webcam.heapResolution(5, spoofing);\nvar app = client_unit_master + mp;\nbsodGif += osdInstall;\n</code></pre> <p>Ora ipse cui quoque populi sidus futuros, et dummodo. Quoniam cruentos, obstruat inter: et gratata litoris creatis. Huc terebat diem. Tantale avellere novato fugis attonitaeque: pastum atque perstet si socerum ad terrae scalas!</p>"},{"location":"about/#sub-huic","title":"Sub huic","text":"<p>Retemptat damno non, ad rotave corpus audiri crescendo me loqui: thalamis nomenque bisque pater vestigia. Concurrere illius, quae nec sprevit, quid quam et Helenum fixit depositoque proterit cecidere.</p> <ul> <li>Simul praesentia mea retexite cuius dolet dira</li> <li>Extenuat ad quod pignoribus Monychus infamis damnatque</li> <li>Superos parabat vestrae</li> <li>Non spatiarer ipse postquam edidicisse pontum remissis</li> <li>Parte imo sinit Phoebus qualia iacebant</li> <li>Vos potentia corpore exprimitur altaria apro nunc</li> </ul> <p>Omnipotens meris torsit silvis, at loqui cognoscit polluit petenti, dum ille ubi facit aut. Parum occulto animos, fui letum: quid, Hippodamen comesque, vultuque, alvum ille, remota necari Phoebus. Frustraque dixit.</p> <p>Scripsi origo propositos nunc. Transire aevi epulis illum vulgusque, altera, est temone alas sanior nataeque retroque, tamen ulvis. Fugis hastae adunca, Tritonidos qui ingens oracula pulchros, deorum edendi, mea.</p>"},{"location":"references/","title":"API references","text":"<p>...</p>"},{"location":"references/#iwin.HT","title":"<code>iwin.HT</code>","text":"<p>Colors class:</p> <p>Examples:</p> <ul> <li>Reset all colors with colors.reset</li> <li>Two subclasses fg for foreground and bg for background.</li> </ul> <p>Use as colors.subclass.colorname. i.e. colors.fg.red or colors.bg.green</p> <p>Also, the generic bold, disable, underline, reverse, strikethrough, and invisible work with the main class i.e. colors.bold</p>"},{"location":"references/#iwin.Site","title":"<code>iwin.Site(uid, loc, attributes, params)</code>","text":"<p>             Bases: <code>object</code></p> <p>Object containing attributes and functions related to the nursery site.</p> Deprecated <p>Stop using this class.</p> <p>Parameters:</p> Name Type Description Default <code>uid</code> <code>integer</code> <p>The unique identifier for the site.</p> required <code>loc</code> <code>integer</code> <p>The number of the location.</p> required <code>attributes</code> <code>object</code> <p>The default attributes for each location in IWIN dataset.</p> required <code>params</code> <code>dictionary</code> <p>The parameters to use during calculations.</p> required <p>Other Parameters:</p> Name Type Description <code>whatever</code> <code>int</code> <p>Some integer.</p> <p>Attributes:</p> Name Type Description <code>attributes</code> <code>str</code> <p>Human readable string describing the attributes collected for a particular site.</p> Return <p>A site with all attributes during processing.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print(\"hello\")\nhello\n</code></pre> Todo <ul> <li>For module TODOs</li> <li>You have to also use <code>sphinx.ext.todo</code> extension</li> </ul>"},{"location":"references/#iwin.Site.getRangeDates","title":"<code>iwin.Site.getRangeDates(s=None, e=None, verbose=False)</code>","text":"<p>Get range dates for growing period </p> <p>:param s: Start date eg. Sowing date :param e: End date eg. Maturity date</p> <p>:return: an array or pandas series with the dates in between, or None if error occurs</p>"},{"location":"references/#iwin.Site.getPhenologyDates","title":"<code>iwin.Site.getPhenologyDates(m=None, verbose=False)</code>","text":"<p>Get phenology dates from reported or estimated</p>"},{"location":"references/#iwin.Site.getEstimatedEmergence","title":"<code>iwin.Site.getEstimatedEmergence(m=None, verbose=True)</code>","text":"<p>Get Estimated Emergence</p>"},{"location":"references/#iwin.Site.getEstimatedHeading","title":"<code>iwin.Site.getEstimatedHeading(m=None, verbose=True)</code>","text":"<p>Get Estimated Heading</p>"},{"location":"references/#iwin.Site.getEstimatedMaturity","title":"<code>iwin.Site.getEstimatedMaturity(m=None, threshold=None, scale=None, rate=None, daysGF=None, verbose=True)</code>","text":"<p>Get Estimated Maturity from Observed Heading and Predicted Heading</p>"},{"location":"references/#iwin.Site.getEstimatedPhenologyDates","title":"<code>iwin.Site.getEstimatedPhenologyDates(m=None, verbose=False)</code>","text":"<p>Estimated Phenology (Emergence, Heading, Maturity)</p>"},{"location":"references/#iwin.Site.getWeather","title":"<code>iwin.Site.getWeather(weatherDF=None, s=None, e=None)</code>","text":"<p>Get phenology dates for growing period </p> <p>:param weatherDF: A pandas dataframe with weather data :param s: Start date eg. Sowing date :param e: End date eg. Maturity date</p> <p>:return: a pandas dataframe with the filtered weather data, or None if error occurs</p>"},{"location":"references/#iwin.Site.getSowingDOY","title":"<code>iwin.Site.getSowingDOY()</code>","text":"<p>Get the Day of the Year for Sowing date</p>"},{"location":"references/#iwin.Site.getDayLength","title":"<code>iwin.Site.getDayLength(d=None, lat=None, p=0.0)</code>","text":"<p>Get Day length</p>"},{"location":"references/#iwin.Site.getDayLengthDAP","title":"<code>iwin.Site.getDayLengthDAP(m=None, DAP=None)</code>","text":"<p>Get Date after planting and Day length </p> <p>:params DAP: Days after sowing date</p> <p>:return: tuple with Date and Daylength</p>"},{"location":"references/#iwin.Site.getTDay","title":"<code>iwin.Site.getTDay(m=None, w=None, tminFactor=None)</code>","text":"<p>Calculate day time temperature</p> <p>:param w: Table of weather data with Minimum and Maximum Temperatures :param tminFactor: Minimum Temperature factor</p> <p>:return: a number or array of Day Temperature</p>"},{"location":"references/#iwin.Site.getGDD","title":"<code>iwin.Site.getGDD(m=None, w=None, Tbase=0)</code>","text":"<p>Growing degree days GDD (\u00b0F or \u00b0C)     Calculated from: ((Daily Max Temp + Daily Min Temp)/2) - 32 \u00b0F (or      ((Daily Max Temp + Daily Min Temp)/2)).</p> <p>:param Tmin: Number or array of Minimum Temperatures :param Tmax: Number or array of Maximum Temperatures :param Tbase: Temperature base of the crop</p> <p>:return: a number or array of Growing degree days (GDD)</p>"},{"location":"references/#iwin.Site.getPRFT","title":"<code>iwin.Site.getPRFT(m=None, TDay=None, TOpt=None)</code>","text":"<p>Estimate Photosynthesis reduction factor (PRFT)     PRFT = 1 \u2013 0.0025 * (TDay \u2013 TOpt)^2</p> <p>:param TDay: Number or array of Day Temperatures :param TOpt: Optimum Temperature</p> <p>:return: a number or array of PRFT</p>"},{"location":"references/#iwin.Site.getEmergenceDate","title":"<code>iwin.Site.getEmergenceDate(m=None, cGDD=None, GDDreq=None, verbose=False)</code>","text":"<p>Estimate emergence date</p> <p>Day on which cumulative thermal time reaches 180 GDD (Tbase = 0\u00baC)</p> <p>:params cGDD: Cumulative Sum of GDD :params GDDreq: GDD or thermal time required to emergence :params ts: convert date to Timestamp</p> <p>:return: an emergence date</p>"},{"location":"references/#iwin.Site.getDaysToHeading","title":"<code>iwin.Site.getDaysToHeading(m=None, dayHR=None)</code>","text":"<p>Estimate days to heading after sowing date</p> <p>:params dayHR: Daylength </p> <p>The following Curves are only applied for ESWYT, IDYN and HTWYT data sets If daylength @ 35 DAS &lt; 10.8 hrs     DAYS_TO_HEADING = 491.27 - 38.62 * DayLength @ 35DAS  (daylength in hours) If daylength @ 35 DAS &gt; 10.8 hrs     DAYS_TO_HEADING = 115.36 - 3.87 * DayLength @ 35DAS</p> <p>SAWYT is earlier If daylength @ 35 DAS &lt; 10.8 hrs     DAYS_TO_HEADING = 617.68 - 51.406 * DayLength@35DAS  (daylength in hours) If daylength @ 35 DAS &gt; 10.8 hrs     DAYS_TO_HEADING = 87.38 \u2013 2.36 * DayLength @ 35DAS</p> <p>:return: Estimated days to heading after sowing date</p>"},{"location":"references/#iwin.Site.getMaturityDate","title":"<code>iwin.Site.getMaturityDate(m=None, threshold=None, scale=None, rate=None, daysGF=None, verbose=False)</code>","text":"<p>Estimate maturity date from weather using TAdjDays </p> <p>:params m: model with the global configuration, parameters and data :params threshold: A threshold to adjust the number of temperature days :params scale: A scale to adjust the number of temperature days :params rate: A rate to adjust the number of temperature days :params daysGF: Days to grain filling</p> <p>:return: Estimated days to maturity, Maturity date and number of days between heading to maturity date.</p>"},{"location":"references/#iwin.Site.getWeatherParameters","title":"<code>iwin.Site.getWeatherParameters(m=None, season=False, verbose=False)</code>","text":"<pre><code>Get additional weather parameters per site\n- Avg minimum temperature during growing season\n- Avg maximum temperature during growing season\n- Avg mean temperature during growing season\n- Avg solar radiation during growing season\n- Total amount of precipitation during growing season\n</code></pre> <p>:params weather: the weather dataset for the specific site</p> <p>:return: An updated attributes of the site</p>"},{"location":"references/#iwin.Site.setupIPAR","title":"<code>iwin.Site.setupIPAR(m, _mask_EH=None, _mask_pEH=None, _mask_EpH=None, _mask_pEpH=None, _mask_HM=None, _mask_pHM=None, _mask_HpM=None, _mask_pHpM=None, verbose=False)</code>","text":"<p>Setup parameters to calculate iPAR</p>"},{"location":"references/#iwin.Site.getNormalizeThermalTime","title":"<code>iwin.Site.getNormalizeThermalTime(m=None, cGDD_EH=None, cGDD_pEH=None, cGDD_EpH=None, cGDD_pEpH=None, cGDD_HM=None, cGDD_pHM=None, cGDD_pHpM=None, cGDD_HpM=None, verbose=False)</code>","text":"<p>Normalize GDD or Thermal time</p>"},{"location":"references/#iwin.Site.updateWeatherparams","title":"<code>iwin.Site.updateWeatherparams(_mask_SE=None, _mask_SpE=None, _mask_EH=None, _mask_pEH=None, _mask_EpH=None, _mask_pEpH=None, _mask_EM=None, _mask_pEM=None, _mask_pEpM=None, _mask_SM=None, _mask_SpM=None, _mask_SH=None, _mask_SpH=None, _mask_HM=None, _mask_HpM=None, _mask_pHM=None, _mask_pHpM=None, _mask_dDAS_H=None, _mask_dDAS_pH=None, season=False, verbose=False)</code>","text":"<p>Update weather statistics </p> <p>:params _mask_SM: Filter used to get weather data from Sowing to Maturity :params _mask_SH: Filter used to get weather data from Sowing to Heading :params _mask_EH: Filter used to get weather data from Emergence to Heading :params _mask_pEH: Filter used to get weather data from predicted Emergence to Heading :params _mask_HM: Filter used to get weather data from Heading to Maturity :params _mask_SpM: Filter used to get weather data from Sowing to estimated Maturity :params _mask_SpH: Filter used to get weather data from Sowing to estimated Heading :params _mask_pEpH: Filter used to get weather data from predicted Emergence to estimated Heading :params _mask_HpM: Filter used to get weather data from Heading to estimated Maturity :params _mask_pHpM: Filter used to get weather data from estimated Heading to estimated Maturity :params _mask_dDAS_H: Filter used to get weather data from 35 days after Sowing to Heading :params _mask_dDAS_pH: Filter used to get weather data from 35 days after Sowing to estimated Heading</p> <p>:params season: Display weather statistics for different periods</p> <p>:result: A Site with updated weather statistics</p>"},{"location":"references/#iwin.Site.estimateNDVI","title":"<code>iwin.Site.estimateNDVI(m=None, verbose=False)</code>","text":"<p>Estimate NDVI values for growing cycle.</p> <p>Use of Normalized Thermal Time and Observed NDVI to calculate IPAR  from Emergence to Heading</p> <p>:params Norm_TT_EH: Normalize GDD or Thermal time from Emergence to Heading</p> <p>:return: An array with NDVI values from Emergence to Heading</p>"},{"location":"references/#iwin.Site.estimateNDVI_EH","title":"<code>iwin.Site.estimateNDVI_EH(m=None, Norm_TT_EH=None, verbose=False)</code>","text":"<p>Estimate NDVI values from emergence to heading.</p> <p>Use of Normalized Thermal Time and Observed NDVI to calculate IPAR  from Emergence to Heading</p> <p>:params Norm_TT_EH: Normalize GDD or Thermal time from Emergence to Heading</p> <p>:return: An array with NDVI values from Emergence to Heading</p>"},{"location":"references/#iwin.Site.estimateNDVI_HM","title":"<code>iwin.Site.estimateNDVI_HM(m=None, Norm_TT_HM=None, NDVI_atHeading=None, verbose=False)</code>","text":"<p>Estimate NDVI values from Heading to Maturity.</p> <p>Use of Normalized Thermal Time and Observed NDVI to calculate IPAR  from Heading to Maturity.</p> <p>:params norm_TT_HM: Normalize GDD or Thermal time from Heading to Maturity :params NDVI_max: Maximum NDVI value allowed :params NDVI_atHeading: NDVI reached at Heading date :verbose: Display messages during the processing</p> <p>:return: An array with NDVI values from Heading to Maturity</p>"},{"location":"references/#iwin.Site.getIPAR","title":"<code>iwin.Site.getIPAR(m=None, norm_iPAR_EH_bounds=None, NDVI_constantIPAR=None, RUE=None, YIELD_FACTOR=None, verbose=False)</code>","text":"<p>Total light interception - iPAR</p>"},{"location":"references/#iwin.Site.getIPAR--asrar-g-fuchs-m-kanemasu-et-hatfield-jl-1984","title":"** Asrar, G., Fuchs, M., Kanemasu, E.T., Hatfield, J.L., 1984.","text":""},{"location":"references/#iwin.Site.getIPAR--estimating-absorbed-photosynthetic-radiation-and-leaf-area-index-from-spectral-reflectance","title":"Estimating absorbed photosynthetic radiation and leaf area index from spectral reflectance","text":""},{"location":"references/#iwin.Site.getIPAR--in-wheat-agron-j-76-300306","title":"in wheat. Agron. J. 76, 300\u2013306.","text":""},{"location":"references/#iwin.Site.getIPAR---campos-2018-remote-sensing-based-crop-biomass-with-water-or-light-driven-crop-growth-models-in","title":"- Campos 2018 Remote sensing-based crop biomass with water or light-driven crop growth models in","text":""},{"location":"references/#iwin.Site.getIPAR--wheat-commercial-fields","title":"wheat commercial fields","text":"<p>iPAR = NDVI * 1.25 - 0.19 # between heading and maturity (Campos et al. 2018) iPAR = NDVI * 1.25 - 0.21 Daughtry et al. (1992)</p> <p>:params m: Model with configuration and parameters :params norm_iPAR_EH_bounds: Bounds for iPAR multi-linear equations</p> <p>:return: An array of Total light interception values</p>"},{"location":"references/#iwin.Site.fit","title":"<code>iwin.Site.fit(m=None, season=True, verbose=False)</code>","text":"<pre><code>Run a iPAR Yield model to fit yield\n</code></pre> <p>:params m: Model to run :params sites_to_run: Array of Site objects :params season: Display weather statistics for different periods</p> <p>:resutls: An array of Sites with intermediate results</p>"},{"location":"references/#iwin.gxe","title":"<code>iwin.gxe</code>","text":""},{"location":"references/#iwin.gxe.Nursery","title":"<code>iwin.gxe.Nursery(nursery, data, params=None, weather=None)</code>","text":"<p>             Bases: <code>object</code></p>"},{"location":"references/#iwin.gxe.Nursery.getAvgYieldbyNurseryYear","title":"<code>iwin.gxe.Nursery.getAvgYieldbyNurseryYear(df=None, nursery=None, verbose=False)</code>","text":"<p>For each nursery year, calculate the average yield of each location and Occ.</p> <p>:params df: :params nursery:</p> <p>:return:</p>"},{"location":"references/#iwin.gxe.Nursery.genotypeSelection_byLinearRegression","title":"<code>iwin.gxe.Nursery.genotypeSelection_byLinearRegression(df_GY=None, nursery=None, methods=['OLS', 'RANSAC'], verbose=True)</code>","text":"<p>Select GIDs by linear regression lines</p> <p>Method 1: OLS Method 2: Robust linear regression (RANSAC)</p>"},{"location":"references/#iwin.gxe.Nursery.getEnvironment","title":"<code>iwin.gxe.Nursery.getEnvironment(p, avgGrainYield)</code>","text":"<p>Use cross product to determine whether a point lies above or below a line.</p>"},{"location":"references/#iwin.gxe.Nursery.getClass_old","title":"<code>iwin.gxe.Nursery.getClass_old(p, avgGrainYield, avgEnv, target, qd=4)</code>","text":"<p>Use cross product to determine whether a point lies above or below a line.</p>"},{"location":"references/#iwin.gxe.Nursery.getClass","title":"<code>iwin.gxe.Nursery.getClass(p, avgGrainYield, avgEnv, target=None, qd=4)</code>","text":"<p>Use cross product to determine whether a point lies above or below a line.</p>"},{"location":"references/#iwin.gxe.Nursery.getNumOfOcurrences","title":"<code>iwin.gxe.Nursery.getNumOfOcurrences(df=None, nursery=None, top=10, target=None, qd=4)</code>","text":"<p>Get number of occurrences in classification method</p>"},{"location":"references/#iwin.gxe.Nursery.getNumOfOcurrences_old","title":"<code>iwin.gxe.Nursery.getNumOfOcurrences_old(df=None, nursery=None, top=10, target=['AL', 'BH', 'AH', 'BL'], qd=4)</code>","text":"<p>Get number of occurrences in classification method</p>"},{"location":"references/#iwin.gxe.Nursery.processLRMethods","title":"<code>iwin.gxe.Nursery.processLRMethods(df=None, nursery=None, dirname='./', fmt='pdf', saveFig=True, showFig=True, verbose=True)</code>","text":"<p>Process and generate a figure using the classification method proposed by Urs</p>"},{"location":"references/#iwin.gxe.Nursery.processClassificationMethod_old","title":"<code>iwin.gxe.Nursery.processClassificationMethod_old(df=None, nursery=None, target=['LA', 'LB', 'HA', 'HB'], qd=9, threshold=10, dirname='./', fmt='pdf', saveFig=True, showFig=True, verbose=False)</code>","text":"<p>Classify nurseries by avg grain yield</p>"},{"location":"references/#iwin.gxe.Nursery.processClassificationMethod","title":"<code>iwin.gxe.Nursery.processClassificationMethod(df=None, nursery=None, target=['AL', 'BH', 'AH_A', 'AH_B', 'BL_A', 'BL_B'], qd=4, threshold=10, dirname='./', fmt='pdf', plot_params=None, saveFig=True, showFig=True, verbose=False)</code>","text":"<p>Classify nurseries by avg grain yield</p>"},{"location":"references/#iwin.gxe.Nursery.commonGIDsinMethods","title":"<code>iwin.gxe.Nursery.commonGIDsinMethods(df_raw=None, df=None, selGIDs_m3=None, nursery=None, lw=0.8, hue='G', s=65, alpha=0.85, loc=2, ncol=1, xt_tl=0.01, yt_tl=0.99, ha='left', va='top', dirname='./', fmt='pdf', showFig=True, saveFig=True, verbose=False)</code>","text":"<p>Combine all of the methods applied to the genotypes selection</p>"},{"location":"references/#iwin.gxe.Nursery.commonGIDsinMethods_v2","title":"<code>iwin.gxe.Nursery.commonGIDsinMethods_v2(df_raw=None, df=None, selGIDs_m3=None, nursery=None, bothEnvs=True, lw=0.8, hue='G', s=65, alpha=0.85, loc=2, ncol=1, xt_tl=0.01, yt_tl=0.99, ha='left', va='top', dirname='./', fmt='pdf', showFig=True, saveFig=True, verbose=False)</code>","text":"<p>Combine all of the methods applied to the genotypes selection</p>"},{"location":"references/#iwin.gxe.Nursery.prepareDatasetforGEmodel","title":"<code>iwin.gxe.Nursery.prepareDatasetforGEmodel(df_gen=None, nursery=None, verbose=False)</code>","text":"<p>Prepare data as an input for the GxE models</p>"},{"location":"references/#iwin.gxe.Nursery.GEmeans","title":"<code>iwin.gxe.Nursery.GEmeans(df_ge=None, trial=0, title='', byCountry=False, showFig=True, saveFig=False, annot=True, square=True, dirname='./', fmt='pdf', verbose=False)</code>","text":"<p>Display Genotype, Environment and Genotype-environment means</p> <p>Genotype\u2019s performance across environments shown in line plots and heatmaps Spatial variations (Heat-maps) for all Genotypes all Environemnts</p>"},{"location":"references/#iwin.gxe.Nursery.ge_impute_missing_values","title":"<code>iwin.gxe.Nursery.ge_impute_missing_values(data=None, threshold=0.5, fillna=True, verbose=False)</code>","text":"<p>Select better environments and Genotypes along sites with no empty values.  Remove environments or Genotypes with more than 50% or threshold value of empty data. Fill the rest of the null values with the mean by Environment.</p> <p>:params data: Table of Genotypes, Environments and GE means :params threshold: Upper limit in percentage to remove emtpy Environments and Genotypes records</p> <p>:results: A cleaner two-way table of means</p>"},{"location":"references/#iwin.gxe.Nursery.geAMMI","title":"<code>iwin.gxe.Nursery.geAMMI(data=None, Gen='G', Env='E', trait='GY', trialname=None, twt=False, threshold=0.5, fillna=True, centering=False, scaling=False, n_components=None, verbose=False)</code>","text":"<p>Additive Main Effect and Multiplicative interaction model</p> <p>:params data: table with Genotypes, Environments and traits observations :params twt: if the data is Two-way table of means, default False or in long format.</p> <p>:returns: AMMI model</p>"},{"location":"references/#iwin.gxe.Nursery.geGGE","title":"<code>iwin.gxe.Nursery.geGGE(data=None, env='ENV', gen='GEN', trait='GY', trialname=None, params=None, twt=False, impute_missing_threshold=0.5, verbose=False)</code>","text":"<p>Genotype plus Genotype-Environment interaction model</p>"},{"location":"references/#iwin.gxe.Nursery.gge_rankingG","title":"<code>iwin.gxe.Nursery.gge_rankingG(data=None, env='ENV', gen='GEN', trait='GY', impute_missing_threshold=0.5, params=None, twt=False, title=None, plot_params=None, saveFig=True, showFig=True, dirname='./', fmt='pdf', verbose=False)</code>","text":"<p>Ranking Genotypes Relative to the Ideal Genotype</p> <p>An ideal genotype should have both high mean performance and high stability across environments.</p> <p>This figure defines an \u201cideal\u201d genotype (the center of the concentric circles) to be a point on the AEA  (\u201cabsolutely stable\u201d) in the positive direction and has a vector length equal to the longest vectors of  the genotypes on the positive side of AEA (\u201chighest mean performance\u201d). Therefore, genotypes located closer  to the \u2018ideal genotype\u2019 are more desirable than others.</p> <p>This Figure illustrates an important concept regarding \u201cstability\u201d. The term \u201chigh stability\u201d is meaningful  only when associated with mean performance</p> <p>Note: it should be easy to see how misleading it can be to search and select for \u201cstability\u201d genes.  \u201cStable\u201d genotypes are desirable only when they have high mean performances.</p>"},{"location":"references/#iwin.gxe.Nursery.gge_www","title":"<code>iwin.gxe.Nursery.gge_www(data=None, env='ENV', gen='GEN', trait='GY', impute_missing_threshold=0.5, params=None, twt=False, title=None, plot_params=None, saveFig=True, showFig=True, dirname='./', fmt='pdf', verbose=False)</code>","text":"<p>Which-won-where</p> <p>One of the most attractive features of a GGE biplot is its ability to show the which-won-where pattern  of a genotype by environment dataset. Many researchers find this use of a biplot intriguing, as it  graphically addresses important concepts such as crossover GE, mega-environment differentiation, specific  adaptation, etc.</p> <p>Genotypes located on the vertices of the polygon performed either the best or the poorest in one or  more environments.</p> <ul> <li>The perpendicular lines are equality lines between adjacent genotypes on the polygon, which    facilitate visual comparison of them.</li> <li>The equality lines divide the biplot into sectors, and the winning genotype for each sector    is the one located on the respective vertex.</li> <li>This pattern suggests that the target environment may consist of XXXX different mega-environments    and that different cultivars should be selected and deployed for each.</li> </ul>"},{"location":"references/#iwin.gxe.Nursery.extract_Weather","title":"<code>iwin.gxe.Nursery.extract_Weather(df_raw=None, df_gen=None, df_weather=None, verbose=False)</code>","text":"<p>Extract weather data from AgERA5 dataset for each location</p> <p>Use 150 days after planting to define the growing season</p>"},{"location":"references/#iwin.gxe.Nursery.extract_Weather_growthStages","title":"<code>iwin.gxe.Nursery.extract_Weather_growthStages(df_raw=None, df_gen=None, df_weather=None, verbose=False)</code>","text":"<p>Extract weather data from AgERA5 dataset for each location</p> <p>Use 150 days after planting to define the growing season</p>"},{"location":"references/#iwin.gxe.ammi","title":"<code>iwin.gxe.ammi</code>","text":""},{"location":"references/#iwin.gxe.ammi.AMMI","title":"<code>iwin.gxe.ammi.AMMI(data, trait='', trialname='', params=None)</code>","text":"<p>             Bases: <code>object</code></p>"},{"location":"references/#iwin.gxe.ammi.AMMI.cal_env_residuals","title":"<code>iwin.gxe.ammi.AMMI.cal_env_residuals()</code>","text":"<p>C\u00e1lculo de residuales con respecto a la media de los ambientes</p>"},{"location":"references/#iwin.gxe.ammi.AMMI.calc_gen_residuals","title":"<code>iwin.gxe.ammi.AMMI.calc_gen_residuals()</code>","text":"<p>C\u00e1lculo de residuales con respecto a la media de los genotipos</p>"},{"location":"references/#iwin.gxe.ammi.AMMI.plot","title":"<code>iwin.gxe.ammi.AMMI.plot(title=None, bptype=0, plot_params=None, saveFig=True, showFig=True, dirname='./', fmt='pdf')</code>","text":"<p>Display biplot</p>"},{"location":"references/#iwin.gxe.gge","title":"<code>iwin.gxe.gge</code>","text":""},{"location":"references/#iwin.gxe.gge.GGE","title":"<code>iwin.gxe.gge.GGE(data, env=None, gen=None, trait=None, trialname='', params=None, twt=False, verbose=False)</code>","text":"<p>             Bases: <code>object</code></p> <p>Genotype plus Genotype-Environment interaction model</p>"},{"location":"references/#iwin.gxe.gge.GGE.best_G","title":"<code>iwin.gxe.gge.GGE.best_G(verbose=False)</code>","text":"<p>Select the best or nearest Genotype after GGE ranking Genotypes relative to the Ideal Genotype</p>"},{"location":"references/#iwin.gxe.gge.GGE.calc_env_residuals","title":"<code>iwin.gxe.gge.GGE.calc_env_residuals()</code>","text":"<p>C\u00e1lculo de residuales con respecto a la media de los ambientes</p>"},{"location":"references/#iwin.gxe.gge.GGE.calc_gen_residuals","title":"<code>iwin.gxe.gge.GGE.calc_gen_residuals()</code>","text":"<p>C\u00e1lculo de residuales con respecto a la media de los genotipos</p>"},{"location":"references/#iwin.gxe.gge.GGE.get_twoway_table","title":"<code>iwin.gxe.gge.GGE.get_twoway_table(impute_missing_threshold=0.5, fillna=True, verbose=False)</code>","text":"<p>Create two-way table of means</p>"},{"location":"references/#iwin.gxe.gge.GGE.impute_missing_values","title":"<code>iwin.gxe.gge.GGE.impute_missing_values(data=None, impute_missing_threshold=0.5, fillna=True, verbose=False)</code>","text":"<p>Select better environments and Genotypes along sites with no empty values.  Remove environments or Genotypes with more than 50% or threshold value of empty data. Fill the rest of the null values with the mean by Environment.</p> <p>:params data: Table of Genotypes, Environments and GE means :params impute_missing_threshold: Upper limit in percentage to remove empty Environments and Genotypes records</p> <p>:results: A cleaner two-way table of means</p>"},{"location":"references/#iwin.gxe.gge.GGE.prepare_data","title":"<code>iwin.gxe.gge.GGE.prepare_data(verbose=False)</code>","text":"<p>Prepare data for GGE biplots</p>"},{"location":"references/#iwin.gxe.gge.GGE.getMegaEnvironments","title":"<code>iwin.gxe.gge.GGE.getMegaEnvironments(lim_span=0.25, mxlim=10, verbose=False)</code>","text":"<p>Get Mega-Environments using GGE biplot</p>"},{"location":"references/#iwin.gxe.gge.GGE.plot","title":"<code>iwin.gxe.gge.GGE.plot(title=None, bptype=0, selE=None, selG=None, plot_params=None, saveFig=False, showFig=True, dirname='./', fmt='pdf')</code>","text":"<p>Display biplot</p>"},{"location":"references/#iwin.util","title":"<code>iwin.util</code>","text":""},{"location":"references/#iwin.util.is_number","title":"<code>iwin.util.is_number(s)</code>","text":"<p>Check if the string is a number</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Not a number.</p>"},{"location":"references/#iwin.util.getDOY","title":"<code>iwin.util.getDOY(d)</code>","text":"<p>Get Day of the Year</p>"},{"location":"references/#iwin.util.find_nearest_value","title":"<code>iwin.util.find_nearest_value(array, value)</code>","text":"<p>Find nearest value to a user define value from array</p> <p>:params array: Array of values :params value: value to find into the array</p> <p>:return: a number with the nearest value found</p>"},{"location":"references/#iwin.util.find_nearest_index","title":"<code>iwin.util.find_nearest_index(array, values)</code>","text":"<p>Find nearest index to a user define value from array</p> <p>:params array: Array of values :params values: value to find into the array</p> <p>:return: a number with the nearest index found</p>"},{"location":"references/#iwin.util.find_nearest","title":"<code>iwin.util.find_nearest(array, value)</code>","text":"<p>Find nearest index and value to a user define value from array</p> <p>:params array: Array of values :params value: value to find into the array</p> <p>:return: a number with the nearest value found</p>"},{"location":"references/#iwin.util.getScores","title":"<code>iwin.util.getScores(df, fld1=None, fld2=None)</code>","text":"<p>Get stats for model results</p>"},{"location":"references/#iwin.util.getAccuracy","title":"<code>iwin.util.getAccuracy(y_true, y_predicted)</code>","text":"<p>Calculate accuracy and precision for each year in a nursery site</p>"},{"location":"references/#iwin.util.missing_values_table","title":"<code>iwin.util.missing_values_table(df)</code>","text":"<p>Look for missing values in a dataset</p>"},{"location":"references/#iwin.util.missingData","title":"<code>iwin.util.missingData(df_GE=None, title='IWIN GxE\\nMissing data', dirname='./', fmt='pdf', showFig=True, saveFig=False, verbose=True)</code>","text":"<p>Looking for missing values Check for all the variables in an arrays or pandas DF and visualize the missing data</p>"},{"location":"references/#iwin.util.findNearest_point","title":"<code>iwin.util.findNearest_point(arr=None, pnt=None, verbose=False)</code>","text":"<p>Select the nearest point</p>"},{"location":"references/#iwin.util.getExtrapoledLine","title":"<code>iwin.util.getExtrapoledLine(p1, p2, EXTRAPOL_RATIO=5, rtn_coods=False)</code>","text":"<p>Creates a line extrapoled in p1-&gt;p2 direction</p>"},{"location":"references/#iwin.util.custom_rolling","title":"<code>iwin.util.custom_rolling(d, w=2, op='min')</code>","text":"<p>Duplica el arreglo para completar todos las columnas  con el numero de datos seleccionado para la ventana</p>"},{"location":"references/#iwin.util.assignME","title":"<code>iwin.util.assignME(df)</code>","text":"<p>Mega-environments </p> <p>Al momento solo ME4</p>"},{"location":"references/#iwin.util.normalize_Yield","title":"<code>iwin.util.normalize_Yield(yld, perc)</code>","text":"<p>Use 95th percentile of yield (top 5%) of each site-year as a reference and  express the yield of each GID within a site-year in percent of the top yield.</p>"},{"location":"references/#iwin.util.tidy_corr_matrix","title":"<code>iwin.util.tidy_corr_matrix(corr_mat)</code>","text":"<p>Funci\u00f3n para convertir una matriz de correlaci\u00f3n de pandas en formato tidy.</p>"},{"location":"references/#iwin.util.idenfifyTargetGIDs_byNurseryYear","title":"<code>iwin.util.idenfifyTargetGIDs_byNurseryYear(df_filtered, nursery='ESWYT', path_to_save_results='./', drawFigures=False, verbose=True)</code>","text":"<p>Extract the targeted GIDs from a pre-processed IWIN dataset</p> Classify trials in <ul> <li>Above Avg in Low Yielding Envs - Below Avg in High Yielding Envs</li> <li>Below Avg in Low Yielding Envs - Above Avg in High Yielding Envs</li> <li>Highest/Lowest norm. Yield GIDs</li> <li>Above Avg. Low Temperature GIDs</li> <li>Above Avg. High Temperature GIDs</li> <li>Support or not warmer temperature</li> <li>Warmest Environments</li> </ul> <p>Return 3 tables with linear model parameters</p>"},{"location":"references/#iwin.util.filterTargetGIDs_byThresholdMaxTemperature","title":"<code>iwin.util.filterTargetGIDs_byThresholdMaxTemperature(df_filtered, GIDs_inTarget_highTemperature, nursery='ESWYT', avgLT_threshold=10.0, avgHT_threshold=30.0, gt32C_ndays_threshold=10, path_to_save_results='./', saveFiles=True, verbose=True)</code>","text":"<p>Filter target GIDs by Temperature using <code>Season_TMAX_mean</code> and <code>S-H_TMAX_gt32C_ndays</code> as references</p>"},{"location":"references/#iwin.util.displayMap_spatialDistSelectedGIDs","title":"<code>iwin.util.displayMap_spatialDistSelectedGIDs(df_gids, nursery='ESWYT', path_to_save_results='./', saveFig=True, verbose=False)</code>","text":"<p>Spatial distribution of selected IWIN genotypes</p>"},{"location":"references/#iwin.util.displayGenotypeSensitivitybyWeather","title":"<code>iwin.util.displayGenotypeSensitivitybyWeather(df_final, gid, yFld='Grain Yield', nursery='ESWYT', path_to_save_results='./', saveFig=False)</code>","text":"<p>The Eberhart and Russell regression with the grain yield environmental means along  the x-axis replaced with a climate variable.</p> <p>Genotypes differ in their sensitivity to climate variables</p>"},{"location":"references/#iwin.util.displayTempVsGY_inGrowStagesforAllGIDs","title":"<code>iwin.util.displayTempVsGY_inGrowStagesforAllGIDs(df_filtered, df_HT, nursery='ESWYT', path_to_save_results='./', saveFig=True)</code>","text":"<p>Temperature vs Grain Yield in 3 growth stages (all GIDs)</p>"},{"location":"references/#iwin.util.drawTemperaturebyGrowthStage_acrossYears","title":"<code>iwin.util.drawTemperaturebyGrowthStage_acrossYears(df_data=None, nursery='NURSERY', temp='TMAX', s=20, s2=80, alpha=0.75, lw=1.5, bxplot=False, dirname='GrowthStages_Temperature', fname='TemperatureAcrossYrsxGrowthstage', path_to_save_results='./', saveFig=False, showFig=True, fmt='pdf')</code>","text":"<p>Average daily temperature across years vs mean grain yield by GID</p>"},{"location":"references/#iwin.util.drawTemperaturebyGrowthStage_acrossYears_v2","title":"<code>iwin.util.drawTemperaturebyGrowthStage_acrossYears_v2(df_data=None, nursery='NURSERY', s=20, s2=80, alpha=0.75, lw=1.5, bxplot=False, dirname='GrowthStages_Temperature', fname='TemperatureAcrossYrsxGrowthstage_v2', path_to_save_results='./', saveFig=False, showFig=True, fmt='pdf')</code>","text":"<p>Average daily temperature across years vs mean grain yield by GID</p>"},{"location":"references/#iwin.util.drawRegCoefficientbyGrowthStage_acrossYears","title":"<code>iwin.util.drawRegCoefficientbyGrowthStage_acrossYears(df_data=None, nursery='NURSERY', splitYear=2000, trendVar='Temperature', s=20, s2=80, alpha=0.75, lw=1.5, bxplot=False, dirname='GrowthStages_Temperature', fname='TemperatureAcrossYrsxGrowthstage_v3', path_to_save_results='./', saveFig=False, showFig=True, fmt='pdf')</code>","text":"<p>Average daily temperature across years vs mean grain yield by GID</p>"},{"location":"references/#iwin.util.drawCompareGYvsTMAXbyGS","title":"<code>iwin.util.drawCompareGYvsTMAXbyGS(df_data=None, GIDs2compare=None, nursery='NURSERY', s=10, s2=30, alpha=0.65, lw=1.25, dirname='GrowthStages_Temperature', fname='CompareGYvsTMAXbyGS', path_to_save_results='./', saveFig=False, showFig=True, fmt='pdf')</code>","text":"<p>Comparison of Genotypes vs Maximum Temperature by growth stage display the average daily temperature across years vs mean grain yield by selected GID</p>"},{"location":"references/#iwin.util.ranking_selectedGenotypes","title":"<code>iwin.util.ranking_selectedGenotypes(df_final)</code>","text":"<p>Ranking Selected Genotypes</p>"},{"location":"references/#iwin.util.getVarietyCounts","title":"<code>iwin.util.getVarietyCounts(df, top=5)</code>","text":"<p>Count the number of site-year trials using a cultivar</p>"},{"location":"references/#iwin.util.searchParenLines","title":"<code>iwin.util.searchParenLines(df_raw, df_GY_sorted, top=50)</code>","text":"<p>Identifying parents lines</p>"},{"location":"references/#iwin.util.seachWheatLinesInExtremeWeather","title":"<code>iwin.util.seachWheatLinesInExtremeWeather(df_raw, df, n='ESWYT', AVGHT_THRESHOLD=30.0, GT32C_NDAYS_THRESHOLD=10, splitYear=2005, top=30, path_to_save_results='./', s=10, s2=30, drawFigures=False, showFig=True, verbose=True)</code>","text":"<p>Run all processes in one step to identify best pedigrees in low yielding environments and extreme weather.</p>"},{"location":"references/#iwin.util.figures","title":"<code>iwin.util.figures</code>","text":""},{"location":"references/#iwin.util.figures.chart_compareResults","title":"<code>iwin.util.figures.chart_compareResults(df_result=None, fld1=None, fld2=None, alpha=0.75, s=15, xy_lim=2, hue=None, loc_leg=2, ncol=2, ha='left', va='top', title='', xlabel='', ylabel='', dirname='RUNS', fname='iPAR_model_', dispScore=True, dispLegend=True, saveFig=False, showFig=True, fmt='pdf')</code>","text":"<p>Display a scatter plot to compare two variables in the results</p>"},{"location":"references/#iwin.util.figures.chart_compareResults--parameters","title":"Parameters","text":"<p>:params df_result: A pandas DataFrame with the results and variables to compare :params fld1: Variable or column name to compare :params fld2: Variable or column name to compare :params alpha: Transparency of the points in chart :params s: Size of the points in chart :params xy_lim: Used to extend the x-axis limit. Default 2 units :params hue: Variable to classify or discriminate the results in colors :params title: Title of the figure :params xlabel: Label of the x-axis :params ylabel: Label of the y-axis :params dirname: Folder name to save results :params fname: File name to save the figure :params dispScore: Display the accurracy and others stats of the model :params dispLegend: Display the legend of the chart :params saveFig: Save file in JPG or PDF format :params fmt: Format of the output</p>"},{"location":"references/#iwin.util.figures.chart_compareResults--returns","title":"Returns","text":"<p>:results: A figure in JPG or PDF format with the filename specified into the folder name</p>"},{"location":"references/#iwin.util.figures.chart_compareYieldResults","title":"<code>iwin.util.figures.chart_compareYieldResults(df_result=None, title='iPAR Yield model', alpha=0.95, s=25, xy_lim=2, hue='country', loc_leg=2, ncol=4, xt_tl=0.03, yt_tl=0.99, ha='left', va='top', dirname='Figures', fname='Figure', dispScore=True, saveFig=True, showFig=True, sharex=False, sharey=False, fmt='pdf')</code>","text":"<p>Create a figure to compare several iPAR model simulations results of grain yield</p> <p>:params df_result: A table or DataFrame with the needed data :params title: Name of the figure :params alpha: Transparency of the points in chart :params s: Size of the points in chart :params xy_lim: Used to extend the x-axis limit. Default 2 units :params hue: Variable to classify or discriminate the results in colors :params ncol: Number of columns to split the legend :params dirname: Folder name to save results :params fname: File name to save the figure :params saveFig: Save file or export the figure :params sharex: Share or align all x-axis, it will use the same x scale for all charts if the value is True :params sharey: Share or align all y-axis, it will use the same y scale for all charts if the value is True :params fmt: Format of the output (PNG, JPG or PDF)</p> <p>:results: An integrated figure with 4 charts showing result simulations</p>"},{"location":"references/#iwin.util.figures.chart_compareDaysFromStagesResults","title":"<code>iwin.util.figures.chart_compareDaysFromStagesResults(df_result=None, title='iPAR Yield model', alpha=0.95, s=25, xy_lim=2, hue='loc_code', ncol=4, xt_tl=0.01, yt_tl=0.99, ha='left', va='top', dirname='Figures', fname='Figure', dispScore=True, saveFig=True, showFig=True, sharex=False, sharey=False, fmt='pdf')</code>","text":"<p>Create a figure to compare several iPAR model simulations results of grain yield</p> <p>:params df_result: A table or DataFrame with the needed data :params title: Name of the figure :params alpha: Transparency of the points in chart :params s: Size of the points in chart :params xy_lim: Used to extend the x-axis limit. Default 2 units :params hue: Variable to classify or discriminate the results in colors :params ncol: Number of columns to split the legend :params dirname: Folder name to save results :params fname: File name to save the figure :params saveFig: Save file or export the figure :params sharex: Share or align all x-axis, it will use the same x scale for all charts if the value is True :params sharey: Share or align all y-axis, it will use the same y scale for all charts if the value is True :params fmt: Format of the output (PNG, JPG or PDF)</p> <p>:results: An integrated figure with 4 simulation charts</p>"},{"location":"references/#iwin.util.figures.chartObsYieldTrendsAllNurseries","title":"<code>iwin.util.figures.chartObsYieldTrendsAllNurseries(df_N=None, title='Observed yield trend', s=15, alpha=0.3, addMaxMinTexts=False, saveFig=True, showFig=True, dirname='./', fmt='pdf')</code>","text":"<pre><code>Display a grain yield trends by year\n</code></pre> <p>:params saveFig: Save file in JPG or PDF format :params fmt: Format of the output</p> <p>:results: A figure in JPG or PDF format with the filename specified into the folder name</p>"},{"location":"references/#iwin.util.figures.chartAvgObsYieldTrendsAllNurseries","title":"<code>iwin.util.figures.chartAvgObsYieldTrendsAllNurseries(df_N=None, title='Average observed yield trends', s=50, alpha=0.83, saveFig=True, showFig=True, dirname='./', fmt='pdf')</code>","text":"<pre><code>Display average grain yield trends by year\n</code></pre> <p>:params saveFig: Save file in JPG or PDF format :params fmt: Format of the output</p> <p>:results: A figure in JPG or PDF format with the filename specified into the folder name</p>"},{"location":"references/#iwin.util.figures.figure_AvgYieldbyGID_LR","title":"<code>iwin.util.figures.figure_AvgYieldbyGID_LR(avgGY_1=None, nursery='', hue='G', hue2=None, hue3=None, hue4=None, lw=0.8, s=10, s4=20, alpha=0.45, alpha2=0.85, alpha4=0.95, loc=2, ncol=3, xt_tl=0.01, yt_tl=0.99, ha='left', va='top', methods=['OLS', 'RANSAC'], fld1='AvGYxLocOcc', fld2='AvGYxGID', saveFig=True, showFig=True, dirname='./', fmt='pdf')</code>","text":"<p>Display a figure with regression lines applied for GIDs</p>"},{"location":"references/#iwin.util.figures.figure_AvgYieldbyGID_classify","title":"<code>iwin.util.figures.figure_AvgYieldbyGID_classify(avgGY_1=None, avgGY_2=None, df_countOfGIDs=None, topGinBEnv=None, topGinGEnv=None, nursery='', threshold=5, hue='G', hue2=None, hue3=None, hue4=None, lw=0.8, s=10, s4=20, alpha=0.45, alpha2=0.85, alpha4=0.95, loc=2, ncol=3, xt_tl=0.01, yt_tl=0.99, ha='left', va='top', fld1='AvGYxGID', fld2='AvGYxLocOcc', dispTxt=False, saveFig=True, showFig=True, dirname='./', fmt='pdf')</code>","text":"<p>Display a figure with regression lines applied for GIDs</p>"},{"location":"references/#iwin.util.figures.figure_AvgYieldbyGID_classify_v2","title":"<code>iwin.util.figures.figure_AvgYieldbyGID_classify_v2(avgGY_1=None, avgGY_2=None, df_countOfGIDs=None, topGinBEnv=None, topBinGEnv=None, nursery='', threshold=5, hue='G', hue2=None, hue3=None, hue4=None, lw=0.8, s=10, s4=35, alpha=0.45, alpha2=0.85, alpha4=0.95, loc=4, ncol=3, xt_tl=0.01, yt_tl=0.99, ha='left', va='top', fld1=' AvGYxGID', fld2='AvGYxLocOcc', dispTxt=False, saveFig=True, showFig=True, dirname='./', fmt='pdf')</code>","text":"<p>Display a figure with regression lines applied for GIDs</p>"},{"location":"references/#iwin.util.figures.plot_AvgYieldbyGID_classify","title":"<code>iwin.util.figures.plot_AvgYieldbyGID_classify(avgGY_1=None, selGIDs_m3=None, numGIDsOfOcurrences=None, nursery=None, threshold=10, title=None, ptype=0, qd=4, target=[], plot_params=None, saveFig=True, showFig=True, dirname='./', fmt='jpg')</code>","text":"<p>Display figures with classification results by linear regression and clustering lines</p>"},{"location":"references/#iwin.util.figures.figure_AvgYieldbyGID_combineMethods","title":"<code>iwin.util.figures.figure_AvgYieldbyGID_combineMethods(df_GY=None, fld1='AvGYxLocOcc', fld2='AvGYxGID', nursery='', lw=0.8, hue='G', s=15, alpha=0.85, loc=2, ncol=2, xt_tl=0.01, yt_tl=0.99, ha='left', va='top', showFig=True, saveFig=True, dirname='./', fmt='pdf')</code>","text":"<p>Display a figure with all combined methods</p>"},{"location":"references/#iwin.util.figures.clusterYieldEnvironments","title":"<code>iwin.util.figures.clusterYieldEnvironments(df_selGen=None, nurseryGroup=['ESWYT'], fld1='AvGYxLocOcc', fld2='AvGYxGID', dispText=True, loc=2, ncol=1, alpha=0.65, s=5, hue='YieldEnv', xy_lim=2, xt_tl=0.01, yt_tl=0.99, ha='left', va='top', saveFig=True, showFig=True, oneFigure=True, verbose=True, sharex=False, sharey=False, dirname='./', fmt='pdf')</code>","text":"<p>Display clusters of Yield environments</p>"},{"location":"references/#iwin.util.figures.chartObsYieldTrends","title":"<code>iwin.util.figures.chartObsYieldTrends(df_GY=None, selGIDs=None, ngrp='ESWYT', n=1, title='Observed yield trends', sx_min=2, sy_min=0.05, sx_max=1, sy_max=0.03, addMaxMinTexts=True, saveFig=True, showFig=True, dirname='./', fmt='pdf')</code>","text":"<p>Display Observed Yield Trends</p>"},{"location":"references/#iwin.stats","title":"<code>iwin.stats</code>","text":""},{"location":"references/#iwin.stats.prepareDatasetforR","title":"<code>iwin.stats.prepareDatasetforR(df, folder='GxE')</code>","text":"<p>Prepare the IWIN dataset in a specific format for analysis in R statistical packages</p>"},{"location":"references/#iwin.stats.joinBLUPnBLUE_andNormilizedYield_GrpByGID","title":"<code>iwin.stats.joinBLUPnBLUE_andNormilizedYield_GrpByGID(df, BLU, stats, nursery='', saveFile=True)</code>","text":"<p>Join BLUP and BLUE values, and Normalize Yield</p> <p>It uses 95th percentile of yield (top 5%) of each site-year as a reference and express the yield  of each GID within a site-year in percent of the top yield.</p> <p>Return a group by GID table</p>"},{"location":"references/#iwin.iparyield","title":"<code>iwin.iparyield</code>","text":""},{"location":"references/#iwin.iparyield.model","title":"<code>iwin.iparyield.model</code>","text":""},{"location":"references/#iwin.iparyield.model.iPARModel","title":"<code>iwin.iparyield.model.iPARModel(config, parameters=None)</code>","text":"<p>             Bases: <code>object</code></p>"},{"location":"references/#iwin.iparyield.model.iPARModel.load_raw_datasets","title":"<code>iwin.iparyield.model.iPARModel.load_raw_datasets()</code>","text":"<p>Load raw IWIN and AgERA5 datasets</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.load_datasets","title":"<code>iwin.iparyield.model.iPARModel.load_datasets()</code>","text":"<p>Load IWIN and AgERA5 datasets in parquet format     Reading the Parquet format is much more efficient.</p> <p>:return: Two dataframes for crop phenology and weather dataset respectively.</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.filterPhenologyData","title":"<code>iwin.iparyield.model.iPARModel.filterPhenologyData(data=None, fld=None, value=None, selcols=None, verbose=False)</code>","text":"<p>Filter dataset by Nursery</p> <p>:params data: A table or DF with trial for each site</p> <p>:results: An array or DF of filtered sites</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.prepareData","title":"<code>iwin.iparyield.model.iPARModel.prepareData(data=None, params=None, selcols=None, verbose=False)</code>","text":"<p>Preprocessing dataset to the iPAR yield formats</p> <p>:params data: A table or DF with phenology for each site :params params: Paramaters used to control the phenology simulation :params selcols: Attibutes or columns selected to use in the simulations</p> <p>:results: An array of sites with info setup for run model</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.prepareData_toExtractWeather","title":"<code>iwin.iparyield.model.iPARModel.prepareData_toExtractWeather(data=None, selcols=None, verbose=False)</code>","text":"<p>Preprocessing dataset to extract weather data in parallel</p> <p>:params data: A table or DF with phenology for each site :params selcols: Attibutes or columns selected to use in the simulations</p> <p>:results: An array of sites with info setup for run model</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.process_ClimateStatsforGrowthStage","title":"<code>iwin.iparyield.model.iPARModel.process_ClimateStatsforGrowthStage(s, weather=None, verbose=False)</code>","text":"<p>Distill the climate data down into meaningful variables. Extract weather data from AgERA5 dataset for each location in each growth stage</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.process_ClimateStatsforGrowthPeriod_v3","title":"<code>iwin.iparyield.model.iPARModel.process_ClimateStatsforGrowthPeriod_v3(s, weather=None, climatevars=['TMIN', 'TAVG', 'TMAX', 'PCP', 'SolRad', 'RHUMn', 'RHUMx', 'WIND', 'TDay', 'PTQ', 'iPAR_PRFT'], stats=['min', 'mean', 'max', 'sd'], verbose=False)</code>","text":"<p>Distill the climate data down into meaningful variables. Extract weather data from AgERA5 dataset for each location in each growth stage</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.process_GapFillingforPhenology","title":"<code>iwin.iparyield.model.iPARModel.process_GapFillingforPhenology(sites_to_run=None, climate=True, verbose=False)</code>","text":"<p>Filling gaps for phenology dates using algorithms developed by Urs</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.process_GapFillingforPhenology_v3","title":"<code>iwin.iparyield.model.iPARModel.process_GapFillingforPhenology_v3(m, s, climate=False, verbose=False)</code>","text":"<p>Filling gaps for phenology dates using algorithms developed by Urs</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.fit","title":"<code>iwin.iparyield.model.iPARModel.fit(sites_to_run=None, season=True, verbose=False)</code>","text":"<pre><code>Run an iPAR Yield model to fit yield\n</code></pre> <p>:params sites_to_run: Array of Site objects :params season: Display weather statistics for different periods</p> <p>:resutls: An array of sites with intermediate results</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.runModel","title":"<code>iwin.iparyield.model.iPARModel.runModel(sites_to_run=None, season=True, verbose=False)</code>","text":"<pre><code>Run an iPAR Yield model to fit yield in Parallel\n</code></pre> <p>:params sites_to_run: Array of Site objects :params season: Display weather statistics for different periods</p> <p>:resutls: An array of sites with intermediate results</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.extractClimatexBestPedigreeSelection","title":"<code>iwin.iparyield.model.iPARModel.extractClimatexBestPedigreeSelection(m, sites_to_run=None, batch_start=0, batch_end=100, n_jobs=4, climate=False, fmt='parquet', saveFile=True, verbose=False)</code>","text":"<p>Estimate phenology using Urs' iPAR model and extract weather parameters in Parallel</p> <p>:params sites_to_run: Array of Site objects</p> <p>:resutls: An array of sites with intermediate results</p>"},{"location":"references/#iwin.iparyield.model.iPARModel.estimateWeatherPhenology_byObs","title":"<code>iwin.iparyield.model.iPARModel.estimateWeatherPhenology_byObs(model, sites_to_run, batch_size=1000, n_jobs=4, climate=True, saveIntermediateFiles=False, saveFile=True, vb=False)</code>","text":"<p>Estimate phenology using Urs' iPAR model and extract weather parameters for each observation, running in Parallel</p>"},{"location":"references/#iwin.iparyield.model.tadjday","title":"<code>iwin.iparyield.model.tadjday</code>","text":""},{"location":"references/#iwin.iparyield.model.tadjday.calcTAdjDay","title":"<code>iwin.iparyield.model.tadjday.calcTAdjDay(Tavg, threshold=42, scale=140, rate=-0.055)</code>","text":"<p>Calculate daily progress (Adjusted TDays). Depreciated: 20230127</p> <p>:param Tavg: Number or array of Average Temperatures :param threshold: Number of TDays. eg. IWIN: 42, Dhillon: 35, South Asia: 41</p> <p>:return: a number or array of adjusted temperature days</p>"},{"location":"references/#iwin.iparyield.model.tadjday.getTAdjDay","title":"<code>iwin.iparyield.model.tadjday.getTAdjDay(Tavg, threshold=45, scale=140, rate=-0.055)</code>","text":"<p>Calculate daily progress (Adjusted TDays)</p> <p>:param Tavg: Number or array of Average Temperatures :param threshold: Number of TDays. eg. IWIN: 42, Dhillon: 35, South Asia: 41</p> The algorithm tends to overestimate the short and <p>underestimate the long grainfilling durations. y=165* exp(-0.07 * TAverage)</p> <p>Modified Aug-16-2023: </p> <p>:return: a number or array of adjusted temperature days</p>"},{"location":"references/#iwin.iparyield.model.tadjday.apply_TAdjDay","title":"<code>iwin.iparyield.model.tadjday.apply_TAdjDay(Tavg, threshold=45, scale=140, rate=-0.055)</code>","text":"<p>Calculate daily progress (Adjusted TDays)</p> <p>:param Tavg: Number or array of Average Temperatures :param threshold: Number of TDays. eg. IWIN: 42, Dhillon: 35, South Asia: 41</p> <p>:return: a number or array of adjusted temperature days</p>"},{"location":"references/#iwin.iparyield.model.tadjday.estimate_TAdjDay","title":"<code>iwin.iparyield.model.tadjday.estimate_TAdjDay(Tavg=None, threshold=45, scale=140, rate=-0.055)</code>","text":"<p>Calculate daily progress (Adjusted TDays)</p> <p>:param Tavg: Number or array of Average Temperatures :param threshold: Number of TDays. eg. IWIN: 45, Dhillon: 35, South Asia: 41</p> <p>:return: a number or array of adjusted temperature days</p>"},{"location":"references/#iwin.iparyield.model.gdd","title":"<code>iwin.iparyield.model.gdd</code>","text":""},{"location":"references/#iwin.iparyield.model.gdd.calcGDD","title":"<code>iwin.iparyield.model.gdd.calcGDD(Tmin=None, Tmax=None, Tbase=0)</code>","text":"<p>Growing degree days GDD (\u00b0F or \u00b0C)     Calculated from: ((Daily Max Temp + Daily Min Temp)/2) - 32 \u00b0F (or      ((Daily Max Temp + Daily Min Temp)/2)).</p> <p>:param Tmin: Number or array of Minimum Temperatures :param Tmax: Number or array of Maximum Temperatures :param Tbase: Temperature base of the crop</p> <p>:return: a number or array of Growing degree days (GDD)</p>"},{"location":"references/#iwin.iparyield.model.gdd.getGDD","title":"<code>iwin.iparyield.model.gdd.getGDD(Tmin, Tmax, Tbase=0)</code>","text":"<p>Growing degree days GDD (\u00b0F or \u00b0C)     Calculated from: ((Daily Max Temp + Daily Min Temp)/2) - 32 \u00b0F (or      ((Daily Max Temp + Daily Min Temp)/2)).</p> <p>:param Tmin: Number or array of Minimum Temperatures :param Tmax: Number or array of Maximum Temperatures :param Tbase: Temperature base of the crop</p> <p>:return: a number or array of Growing degree days (GDD)</p>"},{"location":"references/#iwin.iparyield.model.gdd.apply_GDD","title":"<code>iwin.iparyield.model.gdd.apply_GDD(Tmin, Tmax, Tbase=0)</code>","text":"<p>Growing degree days GDD (\u00b0F or \u00b0C)     Calculated from: ((Daily Max Temp + Daily Min Temp)/2) - 32 \u00b0F (or      ((Daily Max Temp + Daily Min Temp)/2)).</p> <p>:param Tmin: Number or array of Minimum Temperatures :param Tmax: Number or array of Maximum Temperatures :param Tbase: Temperature base of the crop</p> <p>:return: a number or array of Growing degree days (GDD)</p>"},{"location":"references/#iwin.iparyield.model.gdd.calculateGDD","title":"<code>iwin.iparyield.model.gdd.calculateGDD(Tmin=None, Tmax=None, Tbase=0)</code>","text":"<p>Growing degree days GDD (\u00b0F or \u00b0C)     Calculated from: ((Daily Max Temp + Daily Min Temp)/2) - 32 \u00b0F (or      ((Daily Max Temp + Daily Min Temp)/2)).</p> <p>:param Tmin: Number or array of Minimum Temperatures :param Tmax: Number or array of Maximum Temperatures :param Tbase: Temperature base of the crop</p> <p>:return: a number or array of Growing degree days (GDD)</p>"},{"location":"references/#iwin.iparyield.model.prft","title":"<code>iwin.iparyield.model.prft</code>","text":""},{"location":"references/#iwin.iparyield.model.prft.calcPRFT","title":"<code>iwin.iparyield.model.prft.calcPRFT(TDay, TOpt=18)</code>","text":"<p>Estimate Photosynthesis reduction factor (PRFT)     PRFT = 1 \u2013 0.0025 * (TDay \u2013 TOpt)^2</p> <p>:param TDay: Number or array of Day Temperatures :param TOpt: Optimum Temperature</p> <p>:return: a number or array of PRFT</p>"},{"location":"references/#iwin.iparyield.model.prft.apply_PRFT","title":"<code>iwin.iparyield.model.prft.apply_PRFT(Tday, Topt=18)</code>","text":"<p>Estimate Photosynthesis reduction factor (PRFT)     PRFT = 1 \u2013 0.0025 * (TDay \u2013 TOpt)^2</p> <p>:param TDay: Number or array of Day Temperatures :param TOpt: Optimum Temperature</p> <p>:return: a number or array of PRFT</p>"},{"location":"references/#iwin.iparyield.model.prft.calculatePRFT","title":"<code>iwin.iparyield.model.prft.calculatePRFT(Tday, Topt=18)</code>","text":"<p>Estimate Photosynthesis reduction factor (PRFT)     PRFT = 1 \u2013 0.0025 * (TDay \u2013 TOpt)^2</p> <p>:param TDay: Number or array of Day Temperatures :param TOpt: Optimum Temperature</p> <p>:return: a number or array of PRFT</p>"},{"location":"references/#iwin.iparyield.model.ipar","title":"<code>iwin.iparyield.model.ipar</code>","text":""},{"location":"references/#iwin.iparyield.model.ipar.calcIPAR","title":"<code>iwin.iparyield.model.ipar.calcIPAR(Norm_TT_EH=None, Norm_SimNDVI_EH=None, Norm_SimNDVI_HM=None, norm_iPAR_EH_bounds=0.5, NDVI_constantIPAR=0.19, verbose=False)</code>","text":"<p>Total light interception - iPAR</p>"},{"location":"references/#iwin.iparyield.model.ipar.calcIPAR--asrar-g-fuchs-m-kanemasu-et-hatfield-jl-1984","title":"** Asrar, G., Fuchs, M., Kanemasu, E.T., Hatfield, J.L., 1984.","text":""},{"location":"references/#iwin.iparyield.model.ipar.calcIPAR--estimating-absorbed-photosynthetic-radiation-and-leaf-area-index-from-spectral-reflectance","title":"Estimating absorbed photosynthetic radiation and leaf area index from spectral reflectance","text":""},{"location":"references/#iwin.iparyield.model.ipar.calcIPAR--in-wheat-agron-j-76-300306","title":"in wheat. Agron. J. 76, 300\u2013306.","text":""},{"location":"references/#iwin.iparyield.model.ipar.calcIPAR---campos-2018-remote-sensing-based-crop-biomass-with-water-or-light-driven-crop-growth-models-in","title":"- Campos 2018 Remote sensing-based crop biomass with water or light-driven crop growth models in","text":""},{"location":"references/#iwin.iparyield.model.ipar.calcIPAR--wheat-commercial-fields","title":"wheat commercial fields","text":"<p>iPAR = NDVI * 1.25 - 0.19 # between heading and maturity (Campos et al. 2018) iPAR = NDVI * 1.25 - 0.21 Daughtry et al. (1992)</p> <p>:params Norm_TT_EH:  :params Norm_SimNDVI_EH:  :params Norm_SimNDVI_HM:  :params norm_iPAR_EH_bounds: Bounds for iPAR multi-linear equations</p> <p>:return: An array of Total light interception values</p>"},{"location":"references/#iwin.iparyield.model.ipar.getIPAR_EH","title":"<code>iwin.iparyield.model.ipar.getIPAR_EH(Norm_TT_EH, norm_iPAR_EH_bounds=0.5)</code>","text":"<p>Calculate daily progress (Adjusted TDays)</p> <p>:param Tavg: Number or array of Average Temperatures :param threshold: Number of TDays. eg. IWIN: 42, Dhillon: 35, South Asia: 41</p> <p>:return: a number or array of adjusted temperature days</p>"},{"location":"references/#iwin.iparyield.model.ipar.apply_IPAR_EH","title":"<code>iwin.iparyield.model.ipar.apply_IPAR_EH(Norm_TT_EH, norm_iPAR_EH_bounds=0.5)</code>","text":"<p>Calculate daily progress (Adjusted TDays)</p> <p>:param Tavg: Number or array of Average Temperatures :param threshold: Number of TDays. eg. IWIN: 42, Dhillon: 35, South Asia: 41</p> <p>:return: a number or array of adjusted temperature days</p>"},{"location":"references/#iwin.iparyield.model.ipar.estimate_IPAR","title":"<code>iwin.iparyield.model.ipar.estimate_IPAR(Norm_TT_EH=None, Norm_SimNDVI_EH=None, Norm_SimNDVI_HM=None, norm_iPAR_EH_bounds=0.5, NDVI_constantIPAR=0.19, verbose=False)</code>","text":"<p>Total light interception - iPAR</p>"},{"location":"references/#iwin.iparyield.model.ipar.estimate_IPAR--asrar-g-fuchs-m-kanemasu-et-hatfield-jl-1984","title":"** Asrar, G., Fuchs, M., Kanemasu, E.T., Hatfield, J.L., 1984.","text":""},{"location":"references/#iwin.iparyield.model.ipar.estimate_IPAR--estimating-absorbed-photosynthetic-radiation-and-leaf-area-index-from-spectral-reflectance","title":"Estimating absorbed photosynthetic radiation and leaf area index from spectral reflectance","text":""},{"location":"references/#iwin.iparyield.model.ipar.estimate_IPAR--in-wheat-agron-j-76-300306","title":"in wheat. Agron. J. 76, 300\u2013306.","text":""},{"location":"references/#iwin.iparyield.model.ipar.estimate_IPAR---campos-2018-remote-sensing-based-crop-biomass-with-water-or-light-driven-crop-growth-models-in","title":"- Campos 2018 Remote sensing-based crop biomass with water or light-driven crop growth models in","text":""},{"location":"references/#iwin.iparyield.model.ipar.estimate_IPAR--wheat-commercial-fields","title":"wheat commercial fields","text":"<p>iPAR = NDVI * 1.25 - 0.19 # between heading and maturity (Campos et al. 2018) iPAR = NDVI * 1.25 - 0.21 Daughtry et al. (1992)</p> <p>:params Norm_TT_EH:  :params Norm_SimNDVI_EH:  :params Norm_SimNDVI_HM:  :params norm_iPAR_EH_bounds: Bounds for iPAR multi-linear equations</p> <p>:return: An array of Total light interception values</p>"},{"location":"references/#iwin.iparyield.model.daylength","title":"<code>iwin.iparyield.model.daylength</code>","text":""},{"location":"references/#iwin.iparyield.model.daylength.CBM_daylength","title":"<code>iwin.iparyield.model.daylength.CBM_daylength(dayOfYear, lat, p=0.0)</code>","text":"<pre><code>A model comparison for daylength as a function of latitude and day of year\nWilliam C. Forsythe a,* Edward J. Rykiel Jr. a, Randal S. Stahl a, Hsin-i Wu a, Robert M. Schoolfield b\nEcological Modelling 80 (1995) 87-95\n</code></pre> <p>:param dayOfYear: Day of the Year (DOY)  :param lat: Latitude of the site in celsius degrees :param p: Sun angle with the horizon. eg. p = 6.0 : civil twilight,           p = 0.0 : day starts / ends when sun is even with the horizon.           Default value p=0</p> <p>:return: a daylength for the specific site</p>"},{"location":"references/#iwin.iparyield.model.daylength.getDaylength","title":"<code>iwin.iparyield.model.daylength.getDaylength(dayOfYear, lat, p=0.0)</code>","text":"<p>Length of the day for a specific site</p> <p>:param dayOfYear: Day of the Year (DOY)  :param lat: Latitude of the site in celsius degrees :param p: Sun angle with the horizon. eg. p = 6.0 : civil twilight,           p = 0.0 : day starts / ends when sun is even with the horizon.           Default value p=0</p> <p>:return: a daylength for the specific site</p>"},{"location":"references/#iwin.iparyield.model.daylength.apply_Daylength","title":"<code>iwin.iparyield.model.daylength.apply_Daylength(dayOfYear, lat, p=0.0)</code>","text":"<p>Length of the day for a specific site</p> <p>:param dayOfYear: Day of the Year (DOY)  :param lat: Latitude of the site in celsius degrees :param p: Sun angle with the horizon. eg. p = 6.0 : civil twilight,           p = 0.0 : day starts / ends when sun is even with the horizon.           Default value p=0</p> <p>:return: a daylength for the specific site</p>"},{"location":"references/#iwin.iparyield.model.daylength.calculateDayLength","title":"<code>iwin.iparyield.model.daylength.calculateDayLength(d=None, lat=None, p=0.0)</code>","text":"<p>Get Day length</p>"},{"location":"references/#iwin.iparyield.model.ndvi","title":"<code>iwin.iparyield.model.ndvi</code>","text":""},{"location":"references/#iwin.iparyield.model.ndvi.estimateNDVI_EH","title":"<code>iwin.iparyield.model.ndvi.estimateNDVI_EH(norm_TT_EH=None, NDVI_lowerThreshold=None, NDVI_Threshold=None, NDVI_max=None, verbose=False)</code>","text":"<p>Estimate NDVI values from emergence to heading.</p> <p>Use of Normalized Thermal Time and Observed NDVI to calculate IPAR  from Emergence to Heading</p> <p>:params norm_TT_EH: Normilize GDD or Thermal time from Emergence to Heading :params NDVI_lowerThreshold: Lower threshold to estimate NDVI :params NDVI_Threshold: Threshold to estimate NDVI :params NDVI_max: Maximum NDVI value allowed :verbose: Display messages during the processing</p> <p>:return: An array with NDVI values from Emergence to Heading</p>"},{"location":"references/#iwin.iparyield.model.ndvi.estimateNDVI_HM","title":"<code>iwin.iparyield.model.ndvi.estimateNDVI_HM(norm_TT_HM=None, NDVImax=None, NDVI_atHeading=0.94, verbose=False)</code>","text":"<p>Estimate NDVI values from Heading to Maturity.</p> <p>Use of Normalized Thermal Time and Observed NDVI to calculate IPAR  from Heading to Maturity.</p> <p>:params norm_TT_HM: Normilize GDD or Thermal time from Heading to Maturity :params NDVI_max: Maximum NDVI value allowed :params NDVI_atHeading: NDVI reached at Heading date :verbose: Display messages during the processing</p> <p>:return: An array with NDVI values from Heading to Maturity</p>"},{"location":"references/#iwin.iparyield.model.ndvi.getNDVI_EH","title":"<code>iwin.iparyield.model.ndvi.getNDVI_EH(norm_TT_EH, NDVI_lowerThreshold, NDVI_Threshold, NDVI_max)</code>","text":"<p>Estimate NDVI values from emergence to heading.</p> <p>Use of Normalized Thermal Time and Observed NDVI to calculate IPAR  from Emergence to Heading</p> <p>:params norm_TT_EH: Normilize GDD or Thermal time from Emergence to Heading :params NDVI_lowerThreshold: Lower threshold to estimate NDVI :params NDVI_Threshold: Threshold to estimate NDVI :params NDVI_max: Maximum NDVI value allowed :verbose: Display messages during the processing</p> <p>:return: An array with NDVI values from Emergence to Heading</p>"},{"location":"references/#iwin.iparyield.model.ndvi.apply_NDVI_EH","title":"<code>iwin.iparyield.model.ndvi.apply_NDVI_EH(norm_TT_EH, NDVI_lowerThreshold, NDVI_Threshold, NDVI_max)</code>","text":"<p>Estimate NDVI values from emergence to heading.</p> <p>Use of Normalized Thermal Time and Observed NDVI to calculate IPAR  from Emergence to Heading</p> <p>:params norm_TT_EH: Normilize GDD or Thermal time from Emergence to Heading :params NDVI_lowerThreshold: Lower threshold to estimate NDVI :params NDVI_Threshold: Threshold to estimate NDVI :params NDVI_max: Maximum NDVI value allowed :verbose: Display messages during the processing</p> <p>:return: An array with NDVI values from Emergence to Heading</p>"},{"location":"references/#iwin.iparyield.model.ndvi.calculateNDVI_EH","title":"<code>iwin.iparyield.model.ndvi.calculateNDVI_EH(norm_TT_EH, NDVI_lowerThreshold, NDVI_Threshold, NDVI_max)</code>","text":"<p>Estimate NDVI values from emergence to heading.</p> <p>Use of Normalized Thermal Time and Observed NDVI to calculate IPAR  from Emergence to Heading</p> <p>:params norm_TT_EH: Normilize GDD or Thermal time from Emergence to Heading :params NDVI_lowerThreshold: Lower threshold to estimate NDVI :params NDVI_Threshold: Threshold to estimate NDVI :params NDVI_max: Maximum NDVI value allowed :verbose: Display messages during the processing</p> <p>:return: An array with NDVI values from Emergence to Heading</p>"},{"location":"references/#iwin.iparyield.model.ndvi.getNDVI_HM","title":"<code>iwin.iparyield.model.ndvi.getNDVI_HM(norm_TT_HM, NDVImax)</code>","text":"<p>Estimate NDVI values from Heading to Maturity.</p> <p>Use of Normalized Thermal Time and Observed NDVI to calculate IPAR  from Emergence to Heading</p> <p>:params norm_TT_HM: Normilize GDD or Thermal time from Heading to Maturity :params NDVI_max: Maximum NDVI value allowed :verbose: Display messages during the processing</p> <p>:return: An array with NDVI values from Heading to Maturity</p>"},{"location":"references/#iwin.iparyield.model.ndvi.apply_NDVI_HM","title":"<code>iwin.iparyield.model.ndvi.apply_NDVI_HM(norm_TT_HM, NDVImax)</code>","text":"<p>Estimate NDVI values from Heading to Maturity.</p> <p>Use of Normalized Thermal Time and Observed NDVI to calculate IPAR  from Heading to Maturity.</p> <p>:params norm_TT_HM: Normilize GDD or Thermal time from Heading to Maturity :params NDVI_max: Maximum NDVI value allowed :verbose: Display messages during the processing</p> <p>:return: An array with NDVI values from Heading to Maturity</p>"},{"location":"references/#iwin.iparyield.model.ndvi.calculateNDVI_HM","title":"<code>iwin.iparyield.model.ndvi.calculateNDVI_HM(norm_TT_HM=None, NDVImax=None, NDVI_atHeading=0.94, verbose=False)</code>","text":"<p>Estimate NDVI values from Heading to Maturity.</p> <p>Use of Normalized Thermal Time and Observed NDVI to calculate IPAR  from Heading to Maturity.</p> <p>:params norm_TT_HM: Normilize GDD or Thermal time from Heading to Maturity :params NDVI_max: Maximum NDVI value allowed :params NDVI_atHeading: NDVI reached at Heading date :verbose: Display messages during the processing</p> <p>:return: An array with NDVI values from Heading to Maturity</p>"},{"location":"references/#iwin.iparyield.model.tday","title":"<code>iwin.iparyield.model.tday</code>","text":""},{"location":"references/#iwin.iparyield.model.tday.calcTDay","title":"<code>iwin.iparyield.model.tday.calcTDay(Tmin, Tmax, tminFactor=0.25)</code>","text":"<p>Calculate day time temperature     TDay = 0.75Tmax + 0.25TMin</p> <p>:param Tn: Number or array of Minimum Temperatures :param Tx: Number or array of Maximum Temperatures :param tminFactor: Minimum Temperature factor</p> <p>:return: a number or array of Day Temperatures</p>"},{"location":"references/#iwin.iparyield.model.tday.getTDay","title":"<code>iwin.iparyield.model.tday.getTDay(Tmin, Tmax, tminFactor=0.25)</code>","text":"<p>Calculate day time temperature     TDay = 0.75Tmax + 0.25TMin</p> <p>:param Tmin: Number or array of Minimum Temperatures :param Tmax: Number or array of Maximum Temperatures :param tminFactor: Minimum Temperature factor</p> <p>:return: a number or array of Day Temperatures</p>"},{"location":"references/#iwin.iparyield.model.tday.apply_TDay","title":"<code>iwin.iparyield.model.tday.apply_TDay(Tmin, Tmax, tminFactor)</code>","text":"<p>Calculate day time temperature</p> <p>:param Tmin: Numpy array of Minimum Temperatures :param Tmax: Numpy array of Maximum Temperatures :param tminFactor: Minimum Temperature factor</p> <p>:return: a number or array of Day Temperatures</p>"},{"location":"references/#iwin.iparyield.model.tday.estimate_TDay","title":"<code>iwin.iparyield.model.tday.estimate_TDay(Tmin=None, Tmax=None, tminFactor=0.25)</code>","text":"<p>Calculate day time temperature</p> <p>:param Tmin: Numpy array of Minimum Temperatures :param Tmax: Numpy array of Maximum Temperatures :param tminFactor: Minimum Temperature factor</p> <p>:return: a number or array of Day Temperature</p>"},{"location":"references/#iwin.data","title":"<code>iwin.data</code>","text":""},{"location":"references/#iwin.data.load_data","title":"<code>iwin.data.load_data(config=None)</code>","text":"<p>Load IWIN and AgERA5 datasets in parquet format     Reading the Parquet format is much more efficient.</p> <p>:return: Two dataframes for crop phenology and weather dataset respectively.</p>"},{"location":"references/#iwin.data.load_IWINdataset","title":"<code>iwin.data.load_IWINdataset(config=None, imputingData=True, cleanSD=True, missigHisto=True, saveHistoFig=False, saveRawFile=False, verbose=False)</code>","text":"<p>Load updated IWIN dataset</p>"},{"location":"references/#iwin.data.filterPhenologyData","title":"<code>iwin.data.filterPhenologyData(config=None, data=None, fld=None, value=None, selcols=None, verbose=False)</code>","text":"<p>Filter dataset by Nursery</p> <p>:params data: A table or DF with trial for each site</p> <p>:results: An array or DF of filtered sites</p>"},{"location":"references/#iwin.data.imputingMissingValues","title":"<code>iwin.data.imputingMissingValues(df, verbose=True)</code>","text":"<p>Imputation preserves all cases by replacing missing data with an estimated value based on the average of the site-nursery-year.  Once all missing values have been imputed, the data set can then be analysed using standard techniques for complete data.</p>"},{"location":"references/#iwin.data.displaySummaryByNursery","title":"<code>iwin.data.displaySummaryByNursery(df_N=None, nursery='NURSERY', MIN_PERC=5, MAX_PERC=98, KDEHist=True, sel_cols=['GRAIN_YIELD', '1000_GRAIN_WEIGHT', 'DAYS_TO_HEADING', 'DAYS_TO_ANTHESIS', 'DAYS_TO_MATURITY', 'PLANT_HEIGHT', 'TEST_WEIGHT'], verbose=True)</code>","text":"<ul> <li>Cut-off by using percentiles 5% and 98%</li> </ul>"},{"location":"references/#iwin.data.joinBLUPnBLUE_andNormilizedYield_GrpByGID","title":"<code>iwin.data.joinBLUPnBLUE_andNormilizedYield_GrpByGID(config, df, BLU, stats, nursery='', saveFile=True)</code>","text":"<p>Join BLUP and BLUE values, and Normalize Yield</p> <p>It uses 95th percentile of yield (top 5%) of each site-year as a reference and express the yield  of each GID within a site-year in percent of the top yield.</p> <p>Return a group by GID table</p>"},{"location":"references/#iwin.data.getStatsByTrial","title":"<code>iwin.data.getStatsByTrial(config, df_final, fmt='parquet', saveFile=True, verbose=False)</code>","text":"<p>Estimate stats (BLUEs, BLUPs, Heritability, CV, LSD, Genotype significance, among others) for each individual trial.</p>"},{"location":"references/#iwin.data.createArrayOfObjects_toRunInParallel","title":"<code>iwin.data.createArrayOfObjects_toRunInParallel(df)</code>","text":"<p>Create an array of sites with the IWIN observations to speed up further analysis This array of objects is useful to run models in parallel.</p>"},{"location":"references/#iwin.data.formatFeaturesforIWIN","title":"<code>iwin.data.formatFeaturesforIWIN(df, removeObsPheno=False, arrObj=True)</code>","text":"<p>Features or columns in IWIN table need to rename and reformat according to the original IWIN package or library.</p> <ul> <li>Nursery is needed to evaluate the Equation to use in grain filling</li> <li>Rename columns to match with the IWIN library</li> <li>Create array of objects to run models in parallel</li> </ul>"},{"location":"references/#references","title":"References","text":""}]}